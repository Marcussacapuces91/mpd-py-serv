<!DOCTYPE html>
<html lang='fr'>
<head>
    <meta charset='UTF-8'>
    <title>Cyber Radio</title>
    <link rel='stylesheet' href='//ajax.googleapis.com/ajax/dojo/1.9.0/dijit/themes/claro/claro.css' />
    <script>dojoConfig = { async: true, parseOnLoad: true }</script>
<!--    <script src='/dojo/dojo.js'></script>  -->
    <script src="//ajax.googleapis.com/ajax/libs/dojo/1.9.0/dojo/dojo.js"></script>
    <script>
        require([
            "dojo/parser",
            "dijit/layout/BorderContainer",
            "dijit/layout/ContentPane",
            "dijit/form/VerticalSlider", 
            "dijit/form/VerticalRule", 
            "dijit/form/VerticalRuleLabels",
            "dijit/form/Button",
            "dijit/form/ToggleButton",
            "dojo/dnd/Source"
        ]);
    </script>
    <style type="text/css">
        html, body, #mainDiv {
            width: 100%;
            height: 100%;
            margin: 0;
            padding: 0;
            border: 0;
            overflow: hidden;
        }
    </style>
</head>
<body class='claro'>
<div id='mainDiv' data-dojo-type='dijit/layout/BorderContainer' style='width: 100%; height: 100%'>
<!-- Boutons de sélection -->
     <div style="height: 100%; vertical-align: middle; border: none;" data-dojo-type="dijit/layout/ContentPane" data-dojo-props="region:'leading'">
        <div style="width: 100%; text-align: center;">
            <button data-dojo-type="dijit/form/Button" id="buttonPrevious" type="button"><img src="prev.png" alt="Précédent" />
                <script type="dojo/on" data-dojo-event="click" data-dojo-args="evt">
                    player.onPressPrev();                    
                </script>
            </button>
        </div>
        <div>
            <button data-dojo-type="dijit/form/Button" id="buttonStop" type="button" disabled><img src="stop.png" alt="Stop" />
                <script type="dojo/on" data-dojo-event="click" data-dojo-args="evt">
                    player.onPressStop();                    
                </script>
            </button>
            <button data-dojo-type="dijit/form/Button" id="buttonPlayPause" type="button"><img src="play.png" alt="Play/Pause" />
                <script type="dojo/on" data-dojo-event="click" data-dojo-args="evt">
                    player.onPressPlayPause();                    
                </script>
            </button>
        </div>
        <div style="width: 100%; text-align: center;">
            <button data-dojo-type="dijit/form/Button" id="buttonNext" type="button"><img src="next.png" alt="Suivant" />
                <script type="dojo/on" data-dojo-event="click" data-dojo-args="evt">
                    player.onPressNext();                    
                </script>
            </button>
        </div>
     </div>
<!-- Zone Haute - Affichage de la piste en cours -->
     <div id='ecran' data-dojo-type="dijit/layout/ContentPane" data-dojo-props="region:'top', layoutPriority:1" style='height: 6pc'>
     </div>
<!-- Zone centrale -->
     <div data-dojo-type="dijit/layout/ContentPane" data-dojo-props="region:'center'" style="height: 100%; margin:0; padding: 0;">
        <div id='radio' data-dojo-type="dijit/layout/ContentPane" data-dojo-props="href:'/central/radio'">
        </div>
     </div>
<!-- Barre du volume -->
    <div id="volume" data-dojo-type="dijit/form/VerticalSlider" data-dojo-props="region:'trailing'" 
        minimum="0" maximum="100" discreteValues="51"
        intermediateChanges="true"
        showButtons="false" style="border: none;" name="volume">
        <div data-dojo-type="dijit/form/VerticalRule" container="leftDecoration"
            count="11" style="width:5px;"></div>
        <ol data-dojo-type="dijit/form/VerticalRuleLabels" container="leftDecoration"
            style="width:1.5em;font-size:75%;color:gray;">
            <li></li>
            <li>20%</li>
            <li>40%</li>
            <li>60%</li>
            <li>80%</li>
            <li></li>
        </ol>
        <ol data-dojo-type="dijit/form/VerticalRuleLabels" container="rightDecoration"
            style="width:1em;font-size:75%;color:gray;">
            <li>0%</li>
            <li>50%</li>
            <li>100%</li>
        </ol>
        <script type="dojo/on" data-dojo-event="change" data-dojo-args="value">
            player.setVolume(value);
        </script>
    </div>
<!-- Pied de page -->    
    <div data-dojo-type="dijit/layout/ContentPane" data-dojo-props="region:'bottom', layoutPriority:1">
        <button id='repeat' width='20%' type='button' data-dojo-type="dijit/form/ToggleButton" data-dojo-props="iconClass:'dijitCheckBoxIcon', checked: false">Répétition
            <script type="dojo/on" data-dojo-event="change" data-dojo-args="value">
                player.onPressRepeat(value);                            
            </script>
        </button>
        <button id='random' width='20%' type='button' data-dojo-type="dijit/form/ToggleButton" data-dojo-props="iconClass:'dijitCheckBoxIcon', checked: false">Aléatoire
            <script type="dojo/on" data-dojo-event="change" data-dojo-args="value">
                player.onPressRandom(value);                            
            </script>
        </button>
        <button id='single' width='20%' type='button' data-dojo-type="dijit/form/ToggleButton" data-dojo-props="iconClass:'dijitCheckBoxIcon', checked: false">Simple
            <script type="dojo/on" data-dojo-event="change" data-dojo-args="value">
                player.onPressSingle(value);                            
            </script>
        </button>
        <span id='time' width='20%'></span>
        <span id='bitrate' width='20%'></span>
        <span id='audio' width='20%'></span>
    </div>
</div>

<script type="text/javascript">
    var player;

    require(['dojo/parser', 'dojo/ready', 'dojo/dom', 'dojo/on', 
             'dijit/registry', 'dojo/request', 'dojo/_base/array', 
             'dojo/domReady!'], 
        function(parser, ready, dom, on, registry, request, array) {
          ready(function() {

/*
    request.get('/central/radio', { handleAs: 'json' }).then(
        function(response) {
            var s = '';
            array.forEach(response, function(item) {
                switch (item.type) {
                    case 'entete' :
                        if (item.nom)
                            s += '<h2>' + item.nom + '</h2>\n';
                        else
                            s += "<br />\n";    
                        break;
                    case 'radio' :
                        s += "<button data-dojo-type='dijit/form/Button' type='button' title='" + item.nom + "'>\n";
                        s += item.icon ? "  <img src='radio/" + item.icon + "' alt='" + item.nom + "' />\n" : item.nom;
                        s += "  <script type='dojo/on' data-dojo-event='click' data-dojo-args='evt'>\n" +
                             "      player.play('" + item.stream +"');\n" +
                             "  <"+"/script>\n" +
                             "</button>\n";
                        break;
                }
            });       
            registry.byId('radio').set('content', s);   
            registry.byId('radio').startup();   
        },
        function(err) { alert(err.toString()); }
    );
*/

// Singleton de Player
    player = new function() {
        this.state = 'stop';    // Etat du player
        this.buttonStop = registry.byId('buttonStop');
        this.buttonPlayPause = registry.byId('buttonPlayPause');
        
        this.setState = function(state) {
            this.state = state;
            switch (this.state) {
                case 'stop' :
                    this.buttonStop.set('disabled', false);
                    this.buttonPlayPause.set('label', "<img src='play.png' alt='Play' />");
                    break;
                case 'play' :
                    this.buttonStop.set('disabled', false);
                    this.buttonPlayPause.set('label', "<img src='pause.png' alt='Pause' />");
                    break;
                case 'pause' :
                    this.buttonStop.set('disabled', false);
                    this.buttonPlayPause.set('label', "<img src='play.png' alt='Play' />");
                    break;
                default :
                    throw new Error("Unknown state in player.setState()");
            };
        };

        this.onPressRepeat = function(value) {
            request.put('/mpd/status/repeat', { data: value ? '1' : '0' });
        };

        this.onPressRandom = function(value) {
            request.put('/mpd/status/random', { data: value ? '1' : '0' });
        };

        this.onPressSingle = function(value) {
            request.put('/mpd/status/single', { data: value ? '1' : '0' });
        };

        this.onPressPrev = function() {
            request.post('/mpd/previous');
        };

        this.onPressStop = function() {
            request.post('/mpd/stop');
        };

        this.onPressPlayPause = function() {
            var xhr = new XMLHttpRequest();
            switch (this.state) {
                case 'stop' :
                    request.post('/mpd/play');
                    break;
                case 'play' :
                    request.post('/mpd/pause', {data: '1'});
                    break;
                case 'pause' :
                    request.post('/mpd/pause', {data: '0' });
                    break;
                default :
                    throw new Error("Unknown state in player.pressedPlayPause()");
            }
        };

        this.onPressNext = function() {
            request.post('/mpd/next');
        };

        this.setVolume = function(value) {
            request.put('/mpd/volume', { data: value });
        };
        
        this.play = function(url) {
            request.post('/mpd/play/stream', { data: url });
        }
    };

    function time2str(t) {
        var h = Math.floor(t / 3600);
        var m = Math.floor(t / 60 - h * 60);
        var s = Math.floor(t - (h * 60 + m) * 60);
        return (h>0?h+':':'') + (m<10?'0':'')+m + ':' + (s<10?'0':'')+s;
    }

    function updateState() {
        request.get('/mpd/status', { handleAs: 'json' }).then(
            function(response) {
                player.setState(response.state);
                registry.byId('volume').set('value', response.volume);
                registry.byId('repeat').set('checked', response.repeat == '1' );
                registry.byId('random').set('checked', response.random == '1' );
                registry.byId('single').set('checked', response.single == '1' );
                if (response.time) {
                    dom.byId('time').innerHTML = time2str(response.time[0]);
                    if (response.time[1] > 0) dom.byId('time').innerHTML += ' / ' + time2str(response.time[1]);
                } else {
                    dom.byId('time').innerHTML = '-';
                }
                dom.byId('bitrate').innerHTML = response.bitrate + ' kb/s';
                if (etat.audio) {
                    dom.byId('audio').innerHTML = response.audio[0] / 1000 + ' kHz - ' + response.audio[1] + ' bits - ' + response.audio[2] + ' voies';
                } else {
                    dom.byId('audio').innerHTML = '-';
                }
            }    
        );
    };
    
    function updateCurrentSong() {
        request.get('/mpd/currentsong', { handleAs: 'json' }).then(
            function(response) {
                dom.byId('ecran').innerHTML = '<div data-dojo-type="dijit/layout/ContentPane">' +
                    (response.Name ? response.Name + '<br />' : '') +
                    (response.AlbumArtist ? response.AlbumArtist + ' ' : '') + (response.AlbumArtist && response.Album ? ' - ' : '') + (response.Album ? response.Album : '') + (response.AlbumArtist || response.Album ? '<br />' : '') +
                    '<span style="font-size: 200%; font-weight: bold">' + (response.Track ? response.Track + ' : ' : '') + (response.Title ? response.Title + ' ' : '') + (response.Artist != response.AlbumArtist ? '('+response.Artist+')':'') + '</span>' +
                    (response.file ? '<br /><span style="font-family: monospace">'+response.file+'</span>' : '') +
                    '</div>\n';
                document.title = (response.Title ? response.Title + ' ' : '') + (response.Artist != response.AlbumArtist ? '('+response.Artist+')':'');
            }
        );
    };


// *******************
// * Initialisation
    updateState();
    updateCurrentSong();
    setInterval(function(){ updateState(); updateCurrentSong(); }, 1000);

    });
    });    // fin require

</script>

</body>
</html>
